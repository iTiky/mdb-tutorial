// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CSVFetcherClient is the client API for CSVFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSVFetcherClient interface {
	Fetch(ctx context.Context, in *CSVFetchRequest, opts ...grpc.CallOption) (*CSVFetchResponse, error)
}

type cSVFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewCSVFetcherClient(cc grpc.ClientConnInterface) CSVFetcherClient {
	return &cSVFetcherClient{cc}
}

func (c *cSVFetcherClient) Fetch(ctx context.Context, in *CSVFetchRequest, opts ...grpc.CallOption) (*CSVFetchResponse, error) {
	out := new(CSVFetchResponse)
	err := c.cc.Invoke(ctx, "/CSVFetcher/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSVFetcherServer is the server API for CSVFetcher service.
// All implementations must embed UnimplementedCSVFetcherServer
// for forward compatibility
type CSVFetcherServer interface {
	Fetch(context.Context, *CSVFetchRequest) (*CSVFetchResponse, error)
	mustEmbedUnimplementedCSVFetcherServer()
}

// UnimplementedCSVFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedCSVFetcherServer struct {
}

func (UnimplementedCSVFetcherServer) Fetch(context.Context, *CSVFetchRequest) (*CSVFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedCSVFetcherServer) mustEmbedUnimplementedCSVFetcherServer() {}

// UnsafeCSVFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSVFetcherServer will
// result in compilation errors.
type UnsafeCSVFetcherServer interface {
	mustEmbedUnimplementedCSVFetcherServer()
}

func RegisterCSVFetcherServer(s *grpc.Server, srv CSVFetcherServer) {
	s.RegisterService(&_CSVFetcher_serviceDesc, srv)
}

func _CSVFetcher_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSVFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSVFetcherServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSVFetcher/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSVFetcherServer).Fetch(ctx, req.(*CSVFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSVFetcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CSVFetcher",
	HandlerType: (*CSVFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _CSVFetcher_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1.proto",
}

// PriceEntryReaderClient is the client API for PriceEntryReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceEntryReaderClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type priceEntryReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceEntryReaderClient(cc grpc.ClientConnInterface) PriceEntryReaderClient {
	return &priceEntryReaderClient{cc}
}

func (c *priceEntryReaderClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/PriceEntryReader/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceEntryReaderServer is the server API for PriceEntryReader service.
// All implementations must embed UnimplementedPriceEntryReaderServer
// for forward compatibility
type PriceEntryReaderServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedPriceEntryReaderServer()
}

// UnimplementedPriceEntryReaderServer must be embedded to have forward compatible implementations.
type UnimplementedPriceEntryReaderServer struct {
}

func (UnimplementedPriceEntryReaderServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPriceEntryReaderServer) mustEmbedUnimplementedPriceEntryReaderServer() {}

// UnsafePriceEntryReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceEntryReaderServer will
// result in compilation errors.
type UnsafePriceEntryReaderServer interface {
	mustEmbedUnimplementedPriceEntryReaderServer()
}

func RegisterPriceEntryReaderServer(s *grpc.Server, srv PriceEntryReaderServer) {
	s.RegisterService(&_PriceEntryReader_serviceDesc, srv)
}

func _PriceEntryReader_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceEntryReaderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PriceEntryReader/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceEntryReaderServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PriceEntryReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PriceEntryReader",
	HandlerType: (*PriceEntryReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PriceEntryReader_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1.proto",
}
